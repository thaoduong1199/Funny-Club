import React, { Component } from "react";
import { connect } from "react-redux";
import { Navbar, Nav } from "react-bootstrap";

import "./header.css";
import {
  loginStudent,
  logOut,
  getProfileFetch,
  setCurrentUser,
} from "../../Redux/actions/student.action";
import { Link } from "react-router-dom";
import MyVerticallyCenteredModal from "../Modal/Modal";
import { decode } from "jsonwebtoken";
import JwtDecode from "jwt-decode";
import { BsFillCaretDownFill } from "react-icons/bs";

class Header extends Component {
  constructor(props) {
    super(props);

    this.state = {
      username: "",
      password: "",
      modalShow: false,
    };
  }

  handleChange = (event) => {
    var target = event.target;
    var username = target.name;
    var password = target.value;
    this.setState({
      [username]: password,
    });
  };
  setModalShow = (value) => {
    this.setState({
      modalShow: value,
    });
  };

  handleSubmit = (event, isAuthenticated) => {
    event.preventDefault();
    this.validateLogin();
    const { username, password } = this.state;
    this.props.loginStudent(username, password);
  };

  validateLogin = (isAuthenticated) => {
    if (isAuthenticated === true) {
      setTimeout(() => {
        this.setModalShow(false);
      }, 100);
    }
  };

  componentDidMount = () => {
    //goi set current user
    const Authorization = localStorage.getItem("Authorization");
    if (!Authorization) return;
    const decoded = JwtDecode(Authorization);
    this.props.getProfileFetch(decoded.payload.id);
    this.props.setCurrentUser(decoded);
  };

  componentWillReceiveProps(nextProps) {
    // console.log(nextProps);
    const { userLogin } = nextProps;
    // console.log(userLogin.profile.id);
    if (userLogin && userLogin.isAuthenticated) {
      this.validateLogin(userLogin.isAuthenticated);
    }
  }

  LogOut = () => {
    window.location.reload(true);
    this.props.logOut();
  };

  render() {
    const {
      userLogin,
      userRegist,
      getUserInfoById,
      errorsreducer,
      bugfromlogin,
      bugfromregist,
      getProfileFetch,
    } = this.props;
    const buglogin = bugfromlogin.bug;
    const bugregist = bugfromregist.bug;
    const Authorization = localStorage.getItem("Authorization");
    const AfterDecoded = decode(Authorization);
    const Payload = AfterDecoded ? AfterDecoded.payload : "";
    const UserType = Payload.userType;

    const AdminClick =
      UserType === "admin" ? (
        <Link to={`/adminsystem`} className="dropdown-submenu">
          Admin Click here
        </Link>
      ) : (
        ""
      );

    const AdminClubClick =
      UserType === "adminClub" ? (
        <Link to={`/adminClub`} className="dropdown-submenu">
          AdminClub Click here
        </Link>
      ) : (
        ""
      );

    const StaffClick =
      UserType === "staff" ? (
        <Link to={`/staff`} className="dropdown-submenu">
          Staff Click here
        </Link>
      ) : (
        ""
      );

    // khi nào sẽ xuất hiẹn nút đăng nhập khi nào hiện thông tin người dùng
    var userArea = Authorization ? (
      <Nav.Link>
        <div className="dropdown">
          <Link to="/" className="dropdown-nav-link hvr-underline-from-center">
            <span>
              {UserType === "admin"
                ? "Hello Admin !"
                : Payload
                ? `${Payload.mssv} - ${Payload.fullName}`
                : ""}
            </span>
          </Link>

          <div className="dropdown-content-right">
            {UserType === "admin" ? (
              ""
            ) : (
              <Link to={`/user/${Payload.id}`} className="dropdown-submenu">
                THÔNG TIN CÁ NHÂN
              </Link>
            )}
            {AdminClick}
            {AdminClubClick}
            {StaffClick}
            <Link to="/" onClick={this.LogOut} className="dropdown-submenu">
              ĐĂNG XUẤT
            </Link>
          </div>
        </div>
      </Nav.Link>
    ) : (
      <Nav.Link
        onClick={() => this.setModalShow(true)}
        className="dropdown-nav-link hvr-underline-from-center"
      >
        Đăng Nhập
      </Nav.Link>
    );

    return (
      <div>
        <Navbar expand="lg">
          <Navbar.Brand>
            <Link to="/">
              <img
                src="/images/logvlu2.png"
                alt="Văn Lang University"
                className="header-logo"
              />
            </Link>
          </Navbar.Brand>
          <Navbar.Toggle aria-controls="basic-navbar-nav" />
          <Navbar.Collapse id="basic-navbar-nav">
            <Nav className="mr-auto">
              <Nav.Link>
                <Link
                  to="/"
                  className="dropdown-nav-link hvr-underline-from-center"
                >
                  TRANG CHỦ
                </Link>
              </Nav.Link>

              <Nav.Link>
                <Link
                  to="/introduce"
                  className="dropdown-nav-link hvr-underline-from-center "
                >
                  GIỚI THIỆU
                </Link>
              </Nav.Link>

              <Nav.Link>
                <div className="dropdown">
                  <Link className="dropdown-nav-link hvr-underline-from-center">
                
                    CÂU LẠC BỘ{" "}
                  </Link>
                  <div className="dropdown-content-left">
                    <Link to="/clubs/truong" className="dropdown-submenu ">
                      TRƯỜNG
                    </Link>
                    <Link to="/clubs/doanhoi" className="dropdown-submenu ">
                      ĐOÀN HỘI
                    </Link>
                    <Link to="/clubs/khoa" className="dropdown-submenu ">
                      KHOA
                    </Link>
                  </div>
                </div>
              </Nav.Link>
              <Nav.Link>
                <Link
                  to="/events"
                  className="dropdown-nav-link hvr-underline-from-center"
                >
                  SỰ KIỆN
                </Link>
              </Nav.Link>
            </Nav>

            <Nav>{userArea}</Nav>
            {/* formdangnhap */}
            <div>
              <MyVerticallyCenteredModal
                userLogin={userLogin}
                show={this.state.modalShow}
                onHide={() => this.setModalShow(false)}
                handleChange={this.handleChange}
                username={this.state.username}
                password={this.state.password}
                handleSubmit={this.handleSubmit}
                modalShow={this.state.modalShow}
                buglogin={buglogin}
                bugregist={bugregist}
              />
            </div>
          </Navbar.Collapse>
        </Navbar>
      </div>
    );
  }
}

const mapStateToProps = (state) => {
  return {
    errorsreducer: state.errorsReducer,
    userLogin: state.userLogin,
    userRegist: state.userRegist,
    getUserInfoById: state.getUserInfoById,
    bugfromlogin: state.BugFromLogin,
    bugfromregist: state.BugFromRegist,
  };
};

const mapDispatchToProps = (dispatch) => {
  return {
    loginStudent: (userName, passWord) =>
      dispatch(loginStudent(userName, passWord)),
    logOut: () => {
      dispatch(logOut());
    },
    setCurrentUser: (decoded) => {
      dispatch(setCurrentUser(decoded));
    },
    getProfileFetch: (id) => {
      dispatch(getProfileFetch(id));
    },
  };
};

export default connect(mapStateToProps, mapDispatchToProps)(Header);
